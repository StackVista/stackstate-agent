---
- name: StackPack prepare tasks
  tags: prepare
  block:
    - name: List installed StackPacks
      command: sts-cli stackpack list -i
      register: stackpack_list_raw

    - name: set fact
      set_fact:
        installed_stackpacks: "{{ stackpack_list_raw.stdout.split(',') }}"

    - name: List installed StackPacks
      debug:
        var: installed_stackpacks

    - name: Install stackstate-agent-v2 StackPack
      command: sts-cli stackpack install stackstate-agent-v2
      when:
        - 'stackstate-agent-v2' in install_stackpacks
        - 'stackstate-agent-v2' not in installed_stackpacks

    - name: Install kubernetes StackPack
      command: sts-cli stackpack install kubernetes -p kubernetes_cluster_name "{{ k8s_integration.cluster_name }}"
      when:
        - k8s_integration is defined
        - 'kubernetes' in install_stackpacks
        - 'kubernetes' not in installed_stackpacks

    - name: Install Splunk StackPack
      command: sts-cli stackpack install splunk-topology -p splunk_instance_name "{{ yard_id }}" -p sts_instance_url "{{ splunk_instance_protocol }}://{{ splunk_instance_url }}:{{ splunk_instance_port }}"
      when:
        - splunk_integration is defined
        - stackpacklist.find('splunk-topology') == -1

    - name: Install AWS-V2 StackPack
      command: sts-cli stackpack install aws-v2 -p aws_external_id "{{ yard_id }}" -p aws_role_arn "{{ aws_integration.integration_iam_role }}" -p aws_access_key_id "{{ aws_integration.integration_access_key }}" -p aws_secret_access_key "{{ aws_integration.integration_secret_key }}"
      when:
        - 'aws-v2' in install_stackpacks
        - aws_integration is defined
        - 'aws-v2' not in installed_stackpacks


## Cleanup

- name: StackPack cleanup tasks
  tags: cleanup
  ignore_errors: yes
  when: aws_integration is defined
  block:
    - name: Retrieve StsEventBridgeRule resource id
      command: aws cloudformation describe-stack-resource --stack-name {{ aws_integration.cf_stack_name }} --logical-resource-id StsEventBridgeRule --query "StackResourceDetail.PhysicalResourceId" --output=text
      register: sts_event_rule

    - name: Disable StsEventBridgeRule
      command: aws events disable-rule --name {{ sts_event_rule.stdout }}

    - name: Retrieve StsLogsBucket resource id
      command: aws cloudformation describe-stack-resource --stack-name {{ aws_integration.cf_stack_name }} --logical-resource-id StsLogsBucket --query "StackResourceDetail.PhysicalResourceId" --output=text
      register: sts_logs_bucket

    - name: Wait a bit for all objects to be saved to the bucket
      pause:
        seconds: 60

    - name: Retrieve objects versions from StsLogsBucket
      command: "aws s3api list-object-versions --bucket {{ sts_logs_bucket.stdout }} --output=json --query='{Objects: Versions[].{Key:Key,VersionId:VersionId}}'"
      register: sts_logs_objects

    - name: Empty StsLogsBucket
      shell: aws s3api delete-objects --bucket {{ sts_logs_bucket.stdout }} --delete {{ sts_logs_objects.stdout | quote }} --output=text
      when: sts_logs_objects.stdout.find('Key') != -1
