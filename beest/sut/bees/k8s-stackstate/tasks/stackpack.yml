---
- name: StackPack prepare tasks
  tags: prepare
  block:
  - name: List installed StackPacks
    command: sts-cli stackpack list -i
    register: stackpack_list_raw

  - name: set fact
    set_fact:
      stackpacklist: "{{ stackpack_list_raw.stdout }}"

  - name: Install stackstate-agent-v2 StackPack
    command: sts-cli stackpack install stackstate-agent-v2
    when: stackpacklist.find('stackstate-agent-v2') == -1

  - name: Install kubernetes StackPack
    command: sts-cli stackpack install kubernetes -p kubernetes_cluster_name "{{ cluster_name }}"
    when: stackpacklist.find('kubernetes') == -1

  - name: Install AWS-V2 StackPack
    command: sts-cli stackpack install aws-v2 -p aws_external_id "{{ yard_id }}" -p aws_role_arn "{{ integration_iam_role }}" -p aws_access_key_id "{{ integration_access_key }}" -p aws_secret_access_key "{{ integration_secret_key }}"
    when: stackpacklist.find('aws-v2') == -1


## Cleanup

- name: StackPack cleanup tasks
  tags: cleanup
  ignore_errors: yes
  block:
  - name: Retrieve StsEventBridgeRule resource id
    command: aws cloudformation describe-stack-resource --stack-name {{ cf_stack_name }} --logical-resource-id StsEventBridgeRule --query "StackResourceDetail.PhysicalResourceId" --output=text
    register: sts_event_rule

  - name: Disable StsEventBridgeRule
    command: aws events disable-rule --name {{ sts_event_rule.stdout }}

  - name: Retrieve StsLogsBucket resource id
    command: aws cloudformation describe-stack-resource --stack-name {{ cf_stack_name }} --logical-resource-id StsLogsBucket --query "StackResourceDetail.PhysicalResourceId" --output=text
    register: sts_logs_bucket

  - name: Wait a bit for all objects to be saved to the bucket
    pause:
      seconds: 30

  - name: Retrieve objects versions from StsLogsBucket
    command: "aws s3api list-object-versions --bucket {{ sts_logs_bucket.stdout }} --output=json --query='{Objects: Versions[].{Key:Key,VersionId:VersionId}}'"
    register: sts_logs_objects

  - name: Empty StsLogsBucket
    shell: aws s3api delete-objects --bucket {{ sts_logs_bucket.stdout }} --delete {{ sts_logs_objects.stdout | quote }} --output=text
    when: sts_logs_objects.stdout.find('Key') != -1
