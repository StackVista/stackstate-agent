---
- name: StackState prepare tasks
  tags: prepare
  block:
    - name: Add stable chart repo
      kubernetes.core.helm_repository:
        name: stable
        repo_url: "https://charts.helm.sh/stable"

    - name: Add stackstate-internal chart repo
      kubernetes.core.helm_repository:
        name: stackstate-internal
        repo_url: "https://helm-internal.stackstate.io"

    - name: Add stackstate chart repo
      kubernetes.core.helm_repository:
        name: stackstate
        repo_url: "https://helm.stackstate.io"


    - name: Generate sts-toolbox config
      ansible.builtin.template:
        src: sts-toolbox-config.j2.yaml
        dest: "{{ playbook_dir }}/sts-toolbox.yml"

    - name: Generate StackState values
      ansible.builtin.command:
        cmd: sts-toolbox generate-values --config "{{ playbook_dir }}/sts-toolbox.yml" --output "{{ playbook_dir }}/stackstate-values.yml"

    - name: StackState base url
      debug:
        var: sts_url

    # if stackstate chart version is passed, install from stackstate-internal repo, otherwise use latest stable from stackstate repo
    - name: Use helm stackstate test repo
      when: stackstate_helm_chart_version | trim | length > 0
      set_fact:
        stackstate_helm_chart_repo: stackstate-internal/stackstate
        stackstate_version: "{{ stackstate_helm_chart_version }}"

    - when: stackstate_helm_chart_version | trim | length == 0
      block:
      - name: Search last official stackstate version
        command: helm search repo --regexp '\vstackstate/stackstate\v' -o yaml
        register: stackstate_helm_search

      - name: Helm search result to yaml
        set_fact:
          stackstate_helm_search_yaml: "{{ stackstate_helm_search.stdout | from_yaml }}"

      - name: Set stackstate helm version and repo
        set_fact:
          stackstate_version: "{{ stackstate_helm_search_yaml[0].version }}"
          stackstate_helm_chart_repo: stackstate/stackstate


    - name: Deploy stackstate chart '{{ stackstate_version }}' from '{{ stackstate_helm_chart_repo }}'
      kubernetes.core.helm:
        context: "{{ kubecontext }}"
        chart_ref: "{{ stackstate_helm_chart_repo }}"
        chart_version: "{{ stackstate_version }}"
        release_name: stackstate
        release_namespace: "{{ namespace }}"
        create_namespace: true
        update_repo_cache: true
        wait: yes
        wait_timeout: 20m
        values_files:
          - "{{ playbook_dir }}/stackstate-values.yml"
        values:
          global:
            receiverApiKey: "{{ sts_api_key }}"

    - name: Wait till StackState API is ready
      kubernetes.core.k8s_info:
        context: "{{ kubecontext }}"
        kind: Pod
        namespace: "{{ namespace }}"
        label_selectors:
          - "app.kubernetes.io/component = api"
        wait: yes
        wait_timeout: 900 # in secs


## Cleanup

- name: StackState cleanup tasks
  tags: cleanup
  ignore_errors: yes
  block:
    - name: Undeploy stackstate
      kubernetes.core.helm:
        context: "{{ kubecontext }}"
        release_name: stackstate
        release_namespace: "{{ namespace }}"
        state: absent
        wait: true

    - name: Delete namespace '{{namespace}}'
      kubernetes.core.k8s:
        context: "{{ kubecontext }}"
        api_version: v1
        kind: Namespace
        name: "{{ namespace }}"
        state: absent
        wait: true
