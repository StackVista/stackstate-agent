# -version*- mode: ruby -*-
# vi: set ft=ruby :
Vagrant.configure("2") do |config|
  # VM Instance to run the code in
  config.vm.box = "ubuntu/bionic64"
  config.vm.hostname = 'stackstate-agent-t'
  config.vm.network :public_network

  # The settings for this vagrant box
  # We attempt to use all your available resources dynamically
  config.vm.provider "virtualbox" do |v|
    host = RbConfig::CONFIG['host_os']
    if host =~ /darwin/
      v.cpus = `sysctl -n hw.ncpu`.to_i
      v.memory = `sysctl -n hw.memsize`.to_i / 1024 / 1024

    elsif host =~ /linux/
      v.cpus = `nproc`.to_i
      v.memory = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i / 1024

    else
      v.cpus = 4
      v.memory = 8192
    end
  end

  config.vm.synced_folder "./../", "/home/vagrant/stackstate-agent-host"


  config.vm.provision "versioning", type: "shell", inline: <<-SCRIPT
    echo "export SRC_PATH=/go/src/github.com/StackVista/stackstate-agent" >> /home/vagrant/.env
    echo "export BCC_VERSION=v0.12.0" >> /home/vagrant/.env
    echo "export SYSTEM_PROBE_GO_VERSION=1.13.11" >> /home/vagrant/.env
    echo "export DATADOG_AGENT_EMBEDDED_PATH=/opt/datadog-agent/embedded" >> /home/vagrant/.env
    echo "export ARCH=amd64" >> /home/vagrant/.env
    echo "export OMNIBUS_BASE_DIR=/.omnibus" >> /home/vagrant/.env

    echo "export CONDA_ENV=ddpy2" >> /home/vagrant/.env
    echo "export CONDA_VERSION=2" >> /home/vagrant/.env
    echo "export MAJOR_VERSION=2" >> /home/vagrant/.env
    echo "export PYTHON_RUNTIMES=2" >> /home/vagrant/.env
    echo "export PY2_VERSION=2.7.18" >> /home/vagrant/.env
    echo "export PY3_VERSION=3.8.5" >> /home/vagrant/.env
    echo "export CMAKE_VERSION=3.14.7" >> /home/vagrant/.env
    echo "export GOLANG_VERSION=1.14" >> /home/vagrant/.env
    echo "export RVM_VERSION=1.29.12" >> /home/vagrant/.env
    echo "export RUBY_VERSION=2.4.2" >> /home/vagrant/.env
    echo "export ARTIFACTORY_USER=user" >> /home/vagrant/.env
    echo "export ARTIFACTORY_PASSWORD=ZPxcNe6dXZmGmCz3" >> /home/vagrant/.env
    echo "export ARTIFACTORY_URL=artifactory.stackstate.io/artifactory/api/pypi/pypi-local" >> /home/vagrant/.env
    echo "export HOST_DIR=/home/vagrant/stackstate-agent-host" >> /home/vagrant/.env
    echo "export CI_PROJECT_DIR=/home/vagrant/stackstate-agent" >> /home/vagrant/.env
    echo "export C_MAKE_SETUP_PATH=~/cmake" >> /home/vagrant/.env
    echo "export CONDA_SETUP_PATH=~/conda" >> /home/vagrant/.env
    echo "export GIT_LAB_SCRIPTS=$CI_PROJECT_DIR/.assistance/gitlab" >> /home/vagrant/.env
  SCRIPT

  config.vm.provision "dependencies", type: "shell", inline: <<-SCRIPT
    source /home/vagrant/.env

    # System updates
    apt-get update -y
    apt-get upgrade -y
    apt-get install -y build-essential curl git mercurial make binutils bison gcc build-essential

    # Cmake downloads
    mkdir $C_MAKE_SETUP_PATH && cd $C_MAKE_SETUP_PATH
    wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz

    # Conda downloads
    mkdir $CONDA_SETUP_PATH && cd $CONDA_SETUP_PATH
    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh
  SCRIPT


  config.vm.provision "prepare", type: "shell", inline: <<-SCRIPT
    source /home/vagrant/.env

    cp -R $HOST_DIR $CI_PROJECT_DIR
    echo "cd $CI_PROJECT_DIR" >> ~/.env
  SCRIPT


  config.vm.provision "cmake-init", type: "shell", inline: <<-SCRIPT
    source /home/vagrant/.env

    cd $C_MAKE_SETUP_PATH
    tar -xvzf cmake-${CMAKE_VERSION}.tar.gz
    cd cmake-${CMAKE_VERSION}
    ./configure
    make
    export PATH="$PATH:$C_MAKE_SETUP_PATH/cmake-${CMAKE_VERSION}/bin"
    cmake --version

    echo "export PATH=$PATH:$C_MAKE_SETUP_PATH/cmake-${CMAKE_VERSION}/bin" >> /home/vagrant/.env
  SCRIPT

  config.vm.provision "conda-init", type: "shell", inline: <<-SCRIPT
    source /home/vagrant/.env

    cd $CONDA_SETUP_PATH
    chmod 777 ~/miniconda.sh
    bash ~/miniconda.sh -b
    . /root/miniconda3/etc/profile.d/conda.sh
    conda create -n ddpy2 python=${PY2_VERSION}"
    conda create -n ddpy3 python=${PY3_VERSION}"
    conda activate "${CONDA_ENV}"

    echo ". /root/miniconda3/etc/profile.d/conda.sh" >> /home/vagrant/.env
    echo "conda activate ${CONDA_ENV}" >> /home/vagrant/.env
  SCRIPT

  config.vm.provision "golang-init", type: "shell", inline: <<-SCRIPT
    source /home/vagrant/.env

    bash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)
    source /root/.gvm/scripts/gvm
    gvm install go1.4 -B
    gvm use go1.4
    gvm install go${GOLANG_VERSION}
    gvm use go${GOLANG_VERSION}
    go version

    echo "source /root/.gvm/scripts/gvm" >> /home/vagrant/.env
    echo "gvm use go${GOLANG_VERSION}" >> /home/vagrant/.env
  SCRIPT

  # config.vm.provision "gitlab.script.deps_deb", type: "shell", inline: <<-SCRIPT
  #   source /home/vagrant/.env
  #
  #   $GIT_LAB_SCRIPTS/deps_deb.sh
  # SCRIPT


  #  # Rerun golang rtloader.test (vagrant provision --provision-with rtloader.test)
  #  pip install -r requirements.txt
  #  config.vm.provision "rtloader.test", type: "shell", inline: <<-SCRIPT
  #    # Re initialize the env variable for the installed resources
  #    source /root/.gvm/scripts/gvm
  #    gvm use go#{ENV['GOLANG_VERSION']}
  #    export PATH="$PATH:/home/vagrant/cmake-#{ENV['CMAKE_VERSION']}/bin"
  #    . /root/miniconda3/etc/profile.d/conda.sh
  #    cd /home/vagrant/stackstate-agent
  #    conda activate "ddpy#{ENV['CONDA_VERSION']}"

  #    # Golang Invoke Agent Build
  #    inv -e rtloader.clean
  #    invoke -e rtloader.make --python-runtimes "#{ENV['CONDA_VERSION']}"
  #    inv -e rtloader.test
  #    # inv -e test --coverage --race --profile --fail-on-fmt --cpus 4 --major-version #{ENV['MAJOR_VERSION']} --python-runtimes #{ENV['PYTHON_RUNTIMES']}
  #  SCRIPT
end











